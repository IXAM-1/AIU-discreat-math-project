import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Please enter the message to be encrypted: ");
        String message = input.nextLine();

        System.out.print("Please enter two prime numbers: ");
        int prime1 = input.nextInt();
        int prime2 = input.nextInt();

        while (!isPrime(prime1) || !isPrime(prime2)) {
            System.out.print("Please enter two prime numbers: ");
            prime1 = input.nextInt();
            prime2 = input.nextInt();
        }

        int n = prime1 * prime2;
        int m = (prime1 - 1) * (prime2 - 1);

        int e = findCoprimeWithPrime(m);

        int d = modInverse(e, m);

        ArrayList<Integer> encryptedList = new ArrayList<>();
        ArrayList<Integer> decryptedList = new ArrayList<>();

        for (int i = 0; i < message.length(); i++) {
            int ascii = (int) message.charAt(i);
            int encryptedAscii = modPow(ascii, e, n);
            encryptedList.add(encryptedAscii);
        }

        System.out.print("Encrypted message: ");
        for (int i = 0; i < encryptedList.size(); i++) {
            char encryptedChar = (char) encryptedList.get(i).intValue();
            System.out.print(encryptedChar);
        }
        System.out.println();

        for (int i = 0; i < encryptedList.size(); i++) {
            int encryptedAscii = encryptedList.get(i);
            int decryptedAscii = modPow(encryptedAscii, d, n);
            decryptedList.add(decryptedAscii);
        }

        System.out.print("Decrypted message: ");
        for (int i = 0; i < decryptedList.size(); i++) {
            char decryptedChar = (char) decryptedList.get(i).intValue();
            System.out.print(decryptedChar);
        }
        System.out.println();
    }

    public static boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }

        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }

        return true;
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }

    public static int modInverse(int a, int m) {
        int m0 = m;
        int y = 0, x = 1;

        if (m == 1)
            return 0;

        while (a > 1) {
            int q = a / m;
            int t = m;

            m = a % m;
            a = t;
            t = y;

            y = x - q * y;
            x = t;
        }

        if (x < 0)
            x += m0;

        return x;
    }
    
    public static int findCoprimeWithPrime(int prime) {
        int n = 2; // start checking from 2
        while (gcd(n, prime) != 1) {
            n++; // increment n until gcd(n, prime) == 1
        }
        return n;
    }
    public static int modPow(int base, int exp, int modulus) {
        return BigInteger.valueOf(base).modPow(BigInteger.valueOf(exp), BigInteger.valueOf(modulus)).intValue();
    }
}
